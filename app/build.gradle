import org.gradle.api.internal.TaskInputsInternal
import org.gradle.api.internal.TaskOutputsInternal

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
    id 'AndResGuard'
}

//apply from: "tool.gradle"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.zzp.applicationkotlin"
        minSdkVersion 24
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"


        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [UMENG_CHANNEL_VALUE: 'release',
                                UMENG_CHANNEL_VALUE2 : "debug"
        ]

        ndk {
            abiFilter "armeabi-v7a"
            abiFilter "x86"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }

    signingConfigs {
        release {
            storePassword '123456'
            keyAlias = 'common'
            keyPassword '123456'
            storeFile new File(rootDir.absolutePath + File.separator + "common.jks")
        }
    }



    lintOptions {
        abortOnError false
        htmlReport true
        setHtmlOutput(new File("D://c.html"))
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['jni_te']
        }
    }
    /*println "getSourceSets size:" + getSourceSets().size()


    getSourceSets().names.each {
        println("name:${it}")
        getSourceSets().named(it).get().java.srcDirs.each {
           println("java:${it.absolutePath}")
       }
        getSourceSets().named(it).get().resources.srcDirs.each {
            println("resources:${it.absolutePath}")
        }
        getSourceSets().named(it).get().getJniLibs().srcDirs.each {
            println("jniLibs:${it.absolutePath}")
        }
    }*/

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            zipAlignEnabled true
            pseudoLocalesEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

def checkData() {
    TaskOutputsInternal out = packageDebug.getOutputs()
    if(out.hasOutput){
        out.files.each {
            println 'checkData hasOutput:' + it.absolutePath
        }

    }else{
        println 'noOutput'
    }
    println '-----------------------'
    TaskInputsInternal input = packageDebug.getInputs()
    if(input.hasInputs){
        input.files.each {
            println 'checkData hasInputs:' + it.absolutePath
        }
    }else{
        println 'noInput'
    }
}

def createFile(){
    File file = new File("D://myAndroidProject//androidDemo//app//build//intermediates//packaged_manifests//debug//AndroidManifest.xml");
    FileReader reader = new FileReader(file)
    StringBuffer stringBuffer = new StringBuffer()
    String contentLine
    while((contentLine = reader.readLine()) != null)
    {
        System.out.println(contentLine)
        if(contentLine.contains("XmlActivity")){
            stringBuffer.append(contentLine.replace("XmlActivity","Xml123Activity"))
        }else{
            stringBuffer.append(contentLine)
        }
    }
    FileWriter writer = new FileWriter(file)
    writer.write(stringBuffer.toString())
    writer.flush()

    reader.close()
    writer.close()

    System.out.println("createFile success")
}


/*preBuild.doLast {
    checkData()
}*/

def printlnSourceSet(SourceSet sourceSet){
    /*Set<File> files = sourceSet.java.srcDirs
    for(File file:files){
        println("file:${file.absolutePath}")
    }
    Set<File> refiles = sourceSet.resources.srcDirs
    for(File file:refiles){
        println("file:${file.absolutePath}")
    }*/
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.2'
    implementation files('src\\main\\libs\\gradle-core-3.1.0-sources.jar')
    implementation files('src\\main\\libs\\gradle-api-3.1.0-sources.jar')
    implementation files('src\\main\\libs\\gradle-3.1.0-sources.jar')
    implementation files('src\\main\\libs\\gradle-3.1.0-sources.jar')
    implementation files('src\\main\\libs\\builder-3.1.0-sources.jar')
    implementation files('src\\main\\libs\\builder-model-3.1.0-sources.jar')
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation 'com.airbnb.android:lottie:3.5.0'

    implementation 'com.facebook.network.connectionclass:connectionclass:1.0.1'

    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    //retrofit网络请求框架
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    //retrofit添加Json解析返回数据
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    //retrofit添加Rxjava支持
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'

    def work_version = "2.5.0"

    // (Java only)
    implementation "androidx.work:work-runtime:$work_version"

    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"

    // optional - GCMNetworkManager support
    implementation "androidx.work:work-gcm:$work_version"

    // optional - Multiprocess support
    implementation "androidx.work:work-multiprocess:$work_version"

    api 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+'

    implementation 'org.salient.artvideoplayer:artplayer-core:1.1.0'

    implementation 'org.salient.artvideoplayer:artplayer-ijk:1.1.0'
    implementation "org.salient.artvideoplayer:artplayer-armv7a:1.1.0"
    implementation "org.salient.artvideoplayer:artplayer-armv5:1.1.0"
    implementation "org.salient.artvideoplayer:artplayer-x86:1.1.0"
//下面两个需要minSdk version >= 21
    implementation "org.salient.artvideoplayer:artplayer-arm64:1.1.0"

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:1.1.0"
// alternatively, just ViewModel
    implementation "android.arch.lifecycle:viewmodel:1.1.0"
// alternatively, just LiveData
    implementation "android.arch.lifecycle:livedata:1.1.0"

    implementation 'com.tencent.bugly:crashreport:latest.release'

    def room_version = "2.2.6"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    //implementation "com.google.dagger:hilt-android:2.28-alpha"
    //annotationProcessor "com.google.dagger:hilt-android-compiler:2.28-alpha"

    //内存泄漏检测 leakcanary
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

}

andResGuard {
    // mappingFile = file("./resource_mapping.txt")
    mappingFile = null
    use7zip = true
    useSign = true
    // It will keep the origin path of your resources when it's true
    keepRoot = false
    // If set, name column in arsc those need to proguard will be kept to this value
    fixedResName = "arg"
    // It will merge the duplicated resources, but don't rely on this feature too much.
    // it's always better to remove duplicated resource from repo
    mergeDuplicatedRes = true
    whiteList = [
            // your icon
            "R.drawable.icon",
            // for fabric
            "R.string.com.crashlytics.*",
            // for google-services
            "R.string.google_app_id",
            "R.string.gcm_defaultSenderId",
            "R.string.default_web_client_id",
            "R.string.ga_trackingId",
            "R.string.firebase_database_url",
            "R.string.google_api_key",
            "R.string.google_crash_reporting_api_key",
            "R.string.project_id",
    ]
    compressFilePattern = [
            "*.png",
            "*.jpg",
            "*.jpeg",
            "*.gif",
    ]
    sevenzip {
        artifact = 'com.tencent.mm:SevenZip:1.2.21'
        //path = "/usr/local/bin/7za"
    }

    /**
     * Optional: if finalApkBackupPath is null, AndResGuard will overwrite final apk
     * to the path which assemble[Task] write to
     **/
    // finalApkBackupPath = "${project.rootDir}/final.apk"

    /**
     * Optional: Specifies the name of the message digest algorithm to user when digesting the entries of JAR file
     * Only works in V1signing, default value is "SHA-1"
     **/
    // digestalg = "SHA-256"
}



class NewTask extends DefaultTask{

    private File outputFile

    NewTask(){
        setGroup("zzp")
    }

    void setOutputFile(File outputFile){
        this.outputFile = outputFile
    }

    //生成activity文件
    private void createActivityFile(String targetFilePath){
        File targetFile = new File(targetFilePath)
        if(!targetFile.exists()){
            targetFile.getParentFile().mkdirs()
        }
        println("createActivityFile:${targetFilePath}")
        FileWriter writer = new FileWriter(targetFile)
        writer.write("package zzp.com;\n")
        writer.write("public class Utils{\n")
        writer.write("public void str(){System.out.println(\"zzp\");}\n")
        writer.write("}\n")
        writer.flush()
        writer.close()
    }

    @TaskAction
    void task(){
        println("println task")
        createActivityFile(outputFile.absolutePath + "/zzp/com/Utils.java")
    }
}


afterEvaluate {
    android.applicationVariants.all { variant ->
        println("ApplicationId:" + variant.getApplicationId())
        println("buildType:" + variant.getBuildType().getName())

        println("buildFile:" + project.buildDir.absolutePath)

       /* File outputDir = new File(project.buildDir,"newTask")
        if(!outputDir.exists()){
            outputDir.mkdir()
        }

        //variant.addJavaSourceFoldersToModel(rootProject.file("extra_java"))
        NewTask task = project.tasks.create("genrate${variant.name.capitalize()}NewTask",NewTask.class)
        task.setOutputFile(outputDir)

        variant.registerJavaGeneratingTask(task, outputDir)*/

        variant.getProductFlavors().each{
            println("getProductFlavors:" + it.name)
        }

        variant.getSourceSets().each{
            println(it.name)
            println(it.getJavaDirectories())
        }
    }
}

