plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-android-extensions'
}
apply from: "tool.gradle"

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.zzp.applicationkotlin"
        minSdkVersion 23
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        manifestPlaceholders = [UMENG_CHANNEL_VALUE: 'release',
                                UMENG_CHANNEL_VALUE2 : "debug"
        ]

        ndk {
            abiFilter "armeabi-v7a"
            abiFilter "x86"
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += [
                        "room.schemaLocation":"$projectDir/schemas".toString(),
                        "room.incremental":"true",
                        "room.expandProjection":"true"]
            }
        }
    }

    signingConfigs {
        release {
            storePassword '123456'
            keyAlias = 'common'
            keyPassword '123456'
            storeFile new File(rootDir.absolutePath + File.separator + "common.jks")
        }
    }



    lintOptions {
        abortOnError false
        htmlReport true
        setHtmlOutput(new File("D://c.html"))
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['jni_te']
        }
    }
    println "getSourceSets size:" + getSourceSets().size()

    getSourceSets().names.each {
        println("name:${it}")
        getSourceSets().named(it).get().java.srcDirs.each {
           println("java:${it.absolutePath}")
       }
        getSourceSets().named(it).get().resources.srcDirs.each {
            println("resources:${it.absolutePath}")
        }
        getSourceSets().named(it).get().getJniLibs().srcDirs.each {
            println("jniLibs:${it.absolutePath}")
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

}

def printlnSourceSet(SourceSet sourceSet){
    /*Set<File> files = sourceSet.java.srcDirs
    for(File file:files){
        println("file:${file.absolutePath}")
    }
    Set<File> refiles = sourceSet.resources.srcDirs
    for(File file:refiles){
        println("file:${file.absolutePath}")
    }*/
}

def test(){
    println "test"
}

dependencies {

    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.navigation:navigation-fragment-ktx:2.2.2'
    implementation 'androidx.navigation:navigation-ui-ktx:2.2.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'androidx.multidex:multidex:2.0.1'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.1.1"
    implementation 'org.greenrobot:eventbus:3.2.0'
    implementation 'com.airbnb.android:lottie:3.5.0'

    implementation 'com.facebook.network.connectionclass:connectionclass:1.0.1'

    implementation 'com.github.bumptech.glide:glide:4.12.0'
    annotationProcessor 'com.github.bumptech.glide:compiler:4.12.0'

    //retrofit网络请求框架
    implementation 'com.squareup.retrofit2:retrofit:2.5.0'
    //retrofit添加Json解析返回数据
    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
    //retrofit添加Rxjava支持
    implementation 'com.jakewharton.retrofit:retrofit2-rxjava2-adapter:1.0.0'

    def work_version = "2.5.0"

    // (Java only)
    implementation "androidx.work:work-runtime:$work_version"

    // Kotlin + coroutines
    implementation "androidx.work:work-runtime-ktx:$work_version"

    // optional - RxJava2 support
    implementation "androidx.work:work-rxjava2:$work_version"

    // optional - GCMNetworkManager support
    implementation "androidx.work:work-gcm:$work_version"

    // optional - Multiprocess support
    implementation "androidx.work:work-multiprocess:$work_version"

    api 'com.tencent.mm.opensdk:wechat-sdk-android-without-mta:+'

    implementation 'org.salient.artvideoplayer:artplayer-core:1.1.0'

    implementation 'org.salient.artvideoplayer:artplayer-ijk:1.1.0'
    implementation "org.salient.artvideoplayer:artplayer-armv7a:1.1.0"
    implementation "org.salient.artvideoplayer:artplayer-armv5:1.1.0"
    implementation "org.salient.artvideoplayer:artplayer-x86:1.1.0"
//下面两个需要minSdk version >= 21
    implementation "org.salient.artvideoplayer:artplayer-arm64:1.1.0"

    // ViewModel and LiveData
    implementation "android.arch.lifecycle:extensions:1.1.0"
// alternatively, just ViewModel
    implementation "android.arch.lifecycle:viewmodel:1.1.0"
// alternatively, just LiveData
    implementation "android.arch.lifecycle:livedata:1.1.0"

    implementation 'com.tencent.bugly:crashreport:latest.release'

    def room_version = "2.2.6"

    implementation "androidx.room:room-runtime:$room_version"
    annotationProcessor "androidx.room:room-compiler:$room_version"

    //内存泄漏检测 leakcanary
    //debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.7'

}